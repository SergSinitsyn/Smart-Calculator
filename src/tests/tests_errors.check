#test error_code_1
char string[255] = "";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 1;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_2
char string[255 * 10] =
    "1234567890+1234567890+1234567890+1234567890+1234567890+1234567890+"
    "1234567890+1234567890+1234567890+"
    "1234567890+1234567890+1234567890+1234567890+1234567890+1234567890+"
    "1234567890+1234567890+1234567890+"
    "1234567890+1234567890+1234567890+1234567890+1234567890+1234567890+"
    "1234567890+";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 2;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_3
char string[255] = "2 + $";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 3;
int actual_error_code = calculate_value(string, x, &actual_result);

char a[100];
error_name(3, a);
// printf("************%s\n", a);

ck_assert(strcmp(a, "incorrect symbol") == 0);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

// #test error_code_4
// char string[255] = "";
// long double x = 0;

// long double expected_result = 0;
// long double actual_result = 0;

// int expected_error_code = 4;
// int actual_error_code = calculate_value(string, x, &actual_result);

// ck_assert_uint_eq(expected_error_code, actual_error_code);
// ck_assert_ldouble_eq(expected_result, actual_result);
// // end

#test error_code_5
char string[255] = "2+ sinus(5)";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 5;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_6
char string[255] = "2.5.4 + 6";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 6;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_7
char string[255] = "cos()";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 7;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_8
char string[255] = "2*1+5)";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 8;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_9
char string[255] = "(2-6";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 9;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_10
char string[255] = "sqrt2";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 10;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_11
char string[255] = "22+7 5.4";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 11;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_12
char string[255] = "100+2+";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 12;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_13
char string[255] = "-";
long double x = 10;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 13;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_14
char string[255] = "2(*2)";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 14;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_10a
char string[255] = "14sin";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 10;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

#test error_code_15
char string[255] = "1+.";
long double x = 0;

long double expected_result = 0;
long double actual_result = 0;

int expected_error_code = 15;
int actual_error_code = calculate_value(string, x, &actual_result);

ck_assert_uint_eq(expected_error_code, actual_error_code);
ck_assert_ldouble_eq(expected_result, actual_result);
// end

// #test error_code_
// char string[255] = "";
// long double x = 0;

// long double expected_result = ;
// long double actual_result = 0;

// int expected_error_code = 0;
// int actual_error_code = calculate_value(string, x, &actual_result);

// ck_assert_uint_eq(expected_error_code, actual_error_code);
// ck_assert_ldouble_eq(expected_result, actual_result);
// // end